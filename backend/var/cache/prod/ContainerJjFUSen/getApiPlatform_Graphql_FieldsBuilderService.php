<?php

namespace ContainerJjFUSen;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiPlatform_Graphql_FieldsBuilderService extends App_KernelProdContainer
{
    /*
     * Gets the private 'api_platform.graphql.fields_builder' shared service.
     *
     * @return \ApiPlatform\GraphQl\Type\FieldsBuilder
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));
        $c = ($container->privates['api_platform.graphql.types_container'] ??= new \ApiPlatform\GraphQl\Type\TypesContainer());
        $d = ($container->privates['api_platform.symfony.iri_converter'] ?? self::getApiPlatform_Symfony_IriConverterService($container));
        $e = ($container->privates['api_platform.pagination'] ?? $container->load('getApiPlatform_PaginationService'));

        $f = new \ApiPlatform\GraphQl\Type\TypeBuilder($c, new \ApiPlatform\GraphQl\Resolver\ResourceFieldResolver($d), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'api_platform.graphql.fields_builder' => ['privates', 'api_platform.graphql.fields_builder', 'getApiPlatform_Graphql_FieldsBuilderService', true],
        ], [
            'api_platform.graphql.fields_builder' => '?',
        ]), $e);
        $g = ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container));

        $h = new \ApiPlatform\GraphQl\Serializer\SerializerContextBuilder($g);

        $i = new \ApiPlatform\GraphQl\Resolver\Stage\ReadStage($d, ($container->privates['api_platform.state_provider.locator'] ?? self::getApiPlatform_StateProvider_LocatorService($container)), $h, '_');
        $j = ($container->privates['api_platform.security.resource_access_checker'] ?? self::getApiPlatform_Security_ResourceAccessCheckerService($container));

        $k = new \ApiPlatform\GraphQl\Resolver\Stage\SecurityStage($j);
        $l = new \ApiPlatform\GraphQl\Resolver\Stage\SecurityPostDenormalizeStage($j);
        $m = ($container->privates['serializer'] ?? self::getSerializerService($container));

        $n = new \ApiPlatform\GraphQl\Resolver\Stage\SerializeStage($m, $h, $e);
        $o = ($container->privates['api_platform.graphql.resolver_locator'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], []));

        return $container->privates['api_platform.graphql.fields_builder'] = new \ApiPlatform\GraphQl\Type\FieldsBuilder(($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $a, $b, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $c, $f, new \ApiPlatform\GraphQl\Type\TypeConverter($f, $c, $b, $a), new \ApiPlatform\GraphQl\Resolver\Factory\ItemResolverFactory($i, $k, $l, $n, $o), new \ApiPlatform\GraphQl\Resolver\Factory\CollectionResolverFactory($i, $k, $l, $n, $o), new \ApiPlatform\GraphQl\Resolver\Factory\ItemMutationResolverFactory($i, $k, $l, $n, new \ApiPlatform\GraphQl\Resolver\Stage\DeserializeStage($m, $h), new \ApiPlatform\GraphQl\Resolver\Stage\WriteStage(($container->privates['api_platform.state_processor.locator'] ?? $container->load('getApiPlatform_StateProcessor_LocatorService')), $h), new \ApiPlatform\GraphQl\Resolver\Stage\ValidateStage(($container->privates['api_platform.validator'] ?? $container->load('getApiPlatform_ValidatorService'))), $o, new \ApiPlatform\GraphQl\Resolver\Stage\SecurityPostValidationStage($j)), new \ApiPlatform\GraphQl\Resolver\Factory\ItemSubscriptionResolverFactory($i, $k, $n, new \ApiPlatform\GraphQl\Subscription\SubscriptionManager(($container->privates['api_platform.graphql.cache.subscription'] ?? $container->load('getApiPlatform_Graphql_Cache_SubscriptionService')), new \ApiPlatform\GraphQl\Subscription\SubscriptionIdentifierGenerator(), $n, $d, $b, new \ApiPlatform\GraphQl\State\Processor\NormalizeProcessor($m, $h, $e)), NULL), ($container->privates['api_platform.filter_locator'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])), $e, $g, '_');
    }
}
